#pragma once

#pragma once

#include "../Control/ObjectManager.h"
#include "../GameObjects/UI/UIManager.h"
#include "../GameObjects/Imagen.h"
#include "../sdlutils/SDLUtils.h"
#include "../Control/Game.h"
#include "../Control/TextManager.h"
#include "../Control/Camera.h"
#include "SDL.h"

class Player;

// Estados para el tutorial
enum States { TUTORIALSTATE_COGER_CLIENTES, TUTORIALSTATE_PAUSA_COGER_CLIENTES, TUTORIALSTATE_DEJAR_CLIENTES_MESA,
	TUTORIALSTATE_PAUSA_DEJAR_CLIENTES_MESA, TUTORIALSTATE_ABRE_COMANDA, TUTORIALSTATE_PAUSA_ABRE_COMANDA,
	TUTORIALSTATE_APUNTA_PEDIDO ,TUTORIALSTATE_PAUSA_APUNTA_PEDIDO, TUTORIALSTATE_COGE_PAELLA,TUTORIALSTATE_PAUSA_COGE_PAELLA, 
	TUTORIALSTATE_DEJA_PAELLA,TUTORIALSTATE_PAUSA_DEJA_PAELLA,TUTORIALSTATE_COGER_DEJAR_ARROZ,
	TUTORIALSTATE_PAUSA_COGER_DEJAR_ARROZ, TUTORIALSTATE_ARREGLAR_CINTA, TUTORIALSTATE_PAUSA_ARREGLAR_CINTA,
	TUTORIALSTATE_COGER_INGREDIENTE, TUTORIALSTATE_PAUSA_COGER_INGREDIENTE, TUTORIALSTATE_PROCESAR_INGREDIENTE, 
	TUTORIALSTATE_PAUSA_PROCESAR_INGREDIENTE, TUTORIALSTATE_DEJAR_INGREDIENTE, TUTORIALSTATE_PAUSA_DEJAR_INGREDIENTE, 
	TUTORIALSTATE_COCINAR_PAELLA, TUTORIALSTATE_PAUSA_COCINAR_PAELLA, TUTORIALSTATE_RECOGER_PAELLA_COCINADA, 
	TUTORIALSTATE_PAUSA_RECOGER_PAELLA_COCINADA, TUTORIALSTATE_DAR_DE_COMER, TUTORIALSTATE_PAUSA_DAR_DE_COMER, 
	TUTORIALSTATE_SACAR_CUENTA, TUTORIALSTATE_PAUSA_SACAR_CUENTA, TUTORIALSTATE_ECHAR_CLIENTES,
	TUTORIALSTATE_PAUSA_ECHAR_CLIENTES, TUTORIALSTATE_RECOGER_MESA, TUTORIALSTATE_PAUSA_RECOGER_MESA,
	TUTORIALSTATE_DEJAR_LAVAVAJILLAS, TUTORIALSTATE_PAUSA_DEJAR_LAVAVAJILLAS, TUTORIALSTATE_COGER_LAVAVAJILLAS,
	TUTORIALSTATE_PAUSA_COGER_LAVAVAJILLAS, TUTORIALSTATE_DEJAR_PAELLA_PILA, TUTORIALSTATE_PAUSA_FINAL,TUTORIALSTATE_FINAL, 
	TUTORIALSTATE_PAUSA_COMANDA_EQUIVOCADA, TUTORIALSTATE_PAUSA_BORRAR_COMANDA, TUTORIALSTATE_PAUSA_NO_ECHAR_CLIENTES,
	TUTORIALSTATE_PAUSA_INICIO
};



class Scene {

protected:
	Game* mGame;
	ObjectManager* mObjectManager;
	Camera* mCamera;

	States mCurrentState = TUTORIALSTATE_COGER_CLIENTES, anteriorEstado;
	UIManager* mUiManager;

	Imagen* mBackground;
	bool mPaused = false;
	TextManager* mTextMngr;

public:
	Scene(Game* mGame);
	virtual ~Scene();

	virtual void handleInput(bool& exit);
	virtual void update();
	virtual void refresh() {};
	virtual void pauseTutorial() {};
	virtual void render();
	virtual void debug();
	virtual void addPuntuaciones(double puntosComanda) {};
	virtual void changeState(States state) {};
	virtual States getState() { return mCurrentState; };


	ObjectManager* getObjectManager();
	UIManager* getUIManager();
	virtual Player* getPlayer() { return nullptr; };
};